#!/usr/bin/env bash

DOCKER_IMAGE=bkaney/ig-publisher-base

# NOTE: Next time they push, we can use this one
# DOCKER_IMAGE=hl7fhir/ig-publisher-base

# Test for windows, git-bash, cygwin
if [[ $(uname -a) == MINGW* ]]; then
  export MYSY_NO_PATHCONV=1

  if [[ \'"$(pwd)"\' == \'"$(echo $HOME)"\' ]]; then
    echo Cannot run from your home directory on windows, make a subdirectory
    echo and try again.
    exit 1
  fi
fi

# If the second parameter looks like a directory, assume it is the FSH Tank
FSHTANK=.
if [[ "$#" -eq 2 && ("$2" =~ ^\.|/|(/[\w-]+)+$) && (! "$2" =~ ^\-) ]]; then
  FSHTANK=${2}
fi

setup_directories() {
  mkdir -p "$HOME/.ig-publisher-cache/.gradle"
  mkdir -p "$HOME/.ig-publisher-cache/.fhir"
  mkdir -p "$HOME/.ig-publisher-cache/.node"
}

refresh() {
  rm -rf "$HOME/.ig-publisher-cache/.gradle"
  rm -rf "$HOME/.ig-publisher-cache/.fhir"
  rm -rf "$HOME/.ig-publisher-cache/.node"

  setup_directories

  docker pull $DOCKER_IMAGE
}

run_docker() {

docker run --rm -it \
  -v "$HOME/.ig-publisher-cache/.fhir":/home/publisher/.fhir \
  -v "$HOME/.ig-publisher-cache/.gradle":/home/publisher/.gradle \
  -v "$HOME/.ig-publisher-cache/.node":/home/publisher/.node \
  -v "$(pwd)":/home/publisher/ig \
  $DOCKER_IMAGE \
  "$@"

}

run_publisher() {

  if [[ ! -f "$FSHTANK/input-cache/publisher.jar" ]]; then
    echo "* Installing publisher (force)"
    ( cd "$FSHTANK" && run_docker ./_updatePublisher.sh -f )
  fi

  if [ $? -ne 0 ] ; then
    echo "!!! Error updating publisher"
    exit 1
  fi

  echo "* Running IG Publisher"
  ( cd "$FSHTANK" && run_docker ./_genonce.sh )

  if [ $? -ne 0 ] ; then
    echo "!!! Error running publisher"
    exit 1
  fi

}

#
# Program flow...
#

setup_directories

if [[ $1 =~ ^(publish)$ ]]; then

  run_publisher

elif [[ $1 =~ (refresh|-r)$ ]]; then

  refresh

elif [[ $1 =~ (help|\-h)$ ]]; then

  read -r -d '' HELP <<-'EOF'

Usage: nori <COMMAND> [FSH Tank]

A wrapper around IG Publisher and related tools.

--

FSH Tank: Optional path to the root of the IG.

Commands:
  publish:  runs the IG publisher
  sushi:    runs the sushi command
  refresh:  delete cache and pull ig publisher docker image

NOTE: You can also run any command relative to your IG root, e.g.

> nori ./_updatePublisher.sh

The program also makes a few caching directories in the IG root
./input-cache/.fhir, ./input-cache/.gradle, and ./input-cache/.node

--

Examples:

> nori sushi --init
> nori sushi --version
> nori publish ./path/to/ig

EOF

  echo
  echo "$HELP"
  echo

else

  run_docker $@

fi
